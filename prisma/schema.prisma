// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  CreatedAt DateTime @default(now())
  Admin     Boolean  @default(false)

  ID          String @id @default(uuid())
  Email       String @unique
  Name        String
  Password    String
  Description String @default("")
  Social      String @default("None") // None || Competitivo || Casual

  Activities       UserActivity[]
  Event            Event[]
  Message          Message[]
  EventGuest       EventGuest[]
  EventParticipant EventParticipant[]
  EventPermission  EventPermission[]
}

model Event {
  CreatedAt DateTime @default(now())

  ID          String @id @default(uuid())
  Name        String
  Description String

  Start  DateTime
  Finish DateTime
  Locale String

  Public       Boolean @default(true)
  MaxUsers     Int
  CurrentUsers Int

  Social     String   @default("None") // None || Competitivo || Casual
  ActivityID String
  Activity   Activity @relation(fields: [ActivityID], references: [ID], onDelete: Cascade)

  UserID String
  User   User   @relation(fields: [UserID], references: [ID], onDelete: Cascade)

  Message          Message[]
  EventGuest       EventGuest[]
  EventParticipant EventParticipant[]
  EventPermission  EventPermission[]
}

model Message {
  CreatedAt DateTime @default(now())

  ID   String @id @default(uuid())
  Text String

  UserID  String
  User    User   @relation(fields: [UserID], references: [ID], onDelete: Cascade)
  EventID String
  Event   Event  @relation(fields: [EventID], references: [ID], onDelete: Cascade)
}

model Activity {
  CreatedAt DateTime @default(now())

  ID   String @id @default(uuid())
  Name String @unique // None || Futebol || Futsal || Voleibol || Padel || Tenis

  Event Event[]
  User  UserActivity[]
}

// Many to Many
// Alguem que foi convidado
model EventGuest {
  CreatedAt DateTime @default(now())

  UserID  String
  User    User   @relation(fields: [UserID], references: [ID], onDelete: Cascade)
  EventID String
  Event   Event  @relation(fields: [EventID], references: [ID], onDelete: Cascade)

  @@id([UserID, EventID])
}

// Alguem que vai participar
model EventParticipant {
  CreatedAt DateTime @default(now())

  UserID  String
  User    User   @relation(fields: [UserID], references: [ID], onDelete: Cascade)
  EventID String
  Event   Event  @relation(fields: [EventID], references: [ID], onDelete: Cascade)

  @@id([UserID, EventID])
}

// Alguem que pede para participar
model EventPermission {
  CreatedAt DateTime @default(now())

  UserID  String
  User    User   @relation(fields: [UserID], references: [ID], onDelete: Cascade)
  EventID String
  Event   Event  @relation(fields: [EventID], references: [ID], onDelete: Cascade)

  @@id([UserID, EventID])
}

model UserActivity {
  CreatedAt DateTime @default(now())

  UserID     String
  User       User     @relation(fields: [UserID], references: [ID], onDelete: Cascade)
  ActivityID String
  Activity   Activity @relation(fields: [ActivityID], references: [ID], onDelete: Cascade)

  @@id([UserID, ActivityID])
}
