// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  CreatedAt   DateTime @default(now())
  ID          String   @id @default(uuid())
  Email       String   @unique
  Password    String
  Name        String
  Description String   @default("")

  Admin      Boolean        @default(false)
  Social     String         @default("None") // None || Competitivo || Casual
  Activities UserActivity[]

  Event            Event[]
  Message          Message[]
  EventGuest       EventGuest[]
  EventParticipant EventParticipant[]
  EventPermission  EventPermission[]
}

model Event {
  CreatedAt   DateTime @default(now())
  ID          String   @id @default(uuid())
  Name        String
  Description String
  Date        DateTime
  Locale      String
  Duration    String

  Public       Boolean @default(true)
  MaxUsers     Int
  CurrentUsers Int

  Social     String   @default("None") // None || Competitivo || Casual
  Activity   Activity @relation(fields: [ActivityID], references: [ID], onDelete: Cascade)
  ActivityID String

  User   User   @relation(fields: [UserID], references: [ID], onDelete: Cascade)
  UserID String

  Message Message[]

  EventGuest       EventGuest[]
  EventParticipant EventParticipant[]
  EventPermission  EventPermission[]
}

model Message {
  CreatedAt DateTime @default(now())
  ID        String   @id @default(uuid())
  Text      String

  User    User   @relation(fields: [UserID], references: [ID], onDelete: Cascade)
  UserID  String
  Event   Event  @relation(fields: [EventID], references: [ID], onDelete: Cascade)
  EventID String
}

model Activity {
  CreatedAt DateTime @default(now())
  ID        String   @id @default(uuid())
  Name      String   @unique // None || Futebol || Futsal || Voleibol || Padel || Tenis

  Event Event[]
  User  UserActivity[]
}

// Many to Many
// Alguem que foi convidado
model EventGuest {
  User    User   @relation(fields: [UserID], references: [ID], onDelete: Cascade)
  UserID  String
  Event   Event  @relation(fields: [EventID], references: [ID], onDelete: Cascade)
  EventID String

  @@id([UserID, EventID])
}

// Alguem que vai participar
model EventParticipant {
  User    User   @relation(fields: [UserID], references: [ID], onDelete: Cascade)
  UserID  String
  Event   Event  @relation(fields: [EventID], references: [ID], onDelete: Cascade)
  EventID String

  @@id([UserID, EventID])
}

// Alguem que pede para participar
model EventPermission {
  User    User   @relation(fields: [UserID], references: [ID], onDelete: Cascade)
  UserID  String
  Event   Event  @relation(fields: [EventID], references: [ID], onDelete: Cascade)
  EventID String

  @@id([UserID, EventID])
}

model UserActivity {
  User       User     @relation(fields: [UserID], references: [ID], onDelete: Cascade)
  UserID     String
  Activity   Activity @relation(fields: [ActivityID], references: [ID], onDelete: Cascade)
  ActivityID String

  @@id([UserID, ActivityID])
}
